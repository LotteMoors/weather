{"version":3,"sources":["App.js","index.js"],"names":["App","api","useState","query","setQuery","w","setW","ic","setIcon","url","className","main","weather","description","includes","Input","type","placeholder","onChange","e","target","value","onKeyPress","key","fetch","then","response","json","result","icon","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","parseFloat","temp","toFixed","feels_like","src","alt","replace","charAt","toUpperCase","ReactDOM","render","document","getElementById"],"mappings":"8MAqHeA,MA5Gf,WAGI,IAAMC,EACG,mCADHA,EAEI,0CALA,EAsBgBC,mBAAS,IAtBzB,mBAsBHC,EAtBG,KAsBIC,EAtBJ,OAuBQF,mBAAS,IAvBjB,mBAuBHG,EAvBG,KAuBAC,EAvBA,OAwBYJ,mBAAS,IAxBrB,mBAwBHK,EAxBG,KAwBCC,EAxBD,KAyBJC,EAAG,2CAAuCF,EAAvC,QAiBT,OAGQ,qBAAKG,UACiB,oBAAVL,EAAEM,KAC2B,cAA7BN,EAAEO,QAAQ,GAAGC,YACf,UAC8B,eAA7BR,EAAEO,QAAQ,GAAGC,YACd,YAC8B,qBAA7BR,EAAEO,QAAQ,GAAGC,YACd,UAC8B,kBAA7BR,EAAEO,QAAQ,GAAGC,aAAgE,oBAA7BR,EAAEO,QAAQ,GAAGC,YAC9D,UACAR,EAAEO,QAAQ,GAAGC,YAAYC,SAAS,SAAWT,EAAEO,QAAQ,GAAGC,YAAYC,SAAS,WAC/E,WACCT,EAAEO,QAAQ,GAAGC,YAAYC,SAAS,QACpC,WACA,MACD,MAfR,SAkBI,iCACI,qBAAKJ,UAAU,aAAf,SACI,cAACK,EAAA,EAAD,CACIC,KAAK,OACLN,UAAU,aACVO,YAAY,cACZC,SAAU,SAAAC,GAAC,OAAIf,EAASe,EAAEC,OAAOC,QACjCA,MAAOlB,EACPmB,WA7CT,SAAAH,GACG,UAAVA,EAAEI,KACFC,IAAM,GAAD,OAAIvB,EAAJ,qBAAyBE,EAAzB,kBAAwCF,IACxCwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFtB,EAAKsB,GACLxB,EAAS,IACTI,EAAQoB,EAAOhB,QAAQ,GAAGiB,MAC1BC,QAAQC,IAAIH,WAwCO,oBAAVvB,EAAEM,KAEX,gCACI,sBAAKD,UAAU,eAAf,UACA,sBAAKA,UAAU,WAAf,cAA4BL,EAAE2B,KAA9B,IAAoC,gCAAQ3B,EAAE4B,IAAIC,aAClD,qBAAKxB,UAAU,OAAf,SAvEA,SAACyB,GACjB,IAIIC,EAFO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAEhCD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAClE,SAAU,YAAa,UAAW,WAAY,YAK/BL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA6DKE,CAAY,IAAIC,WAE3C,sBAAKnC,UAAU,cAAf,UACI,qBAAKA,UAAU,OAAf,SACKoC,WAAWzC,EAAEM,KAAKoC,KAAO,KAAKC,QAAQ,GAAK,UAEhD,qBAAKtC,UAAU,YAAf,SACI,8CACkBoC,WAAWzC,EAAEM,KAAKsC,WAAa,KAAKD,QAAQ,GAAK,aAMvE,qBAAKtC,UAAU,OAAOwC,IAAMzC,EAAK0C,IAAI,KACrC,qBAAKzC,UAAU,UAAf,SAA0BL,EAAEO,QAAQ,GAAGC,YAAYuC,QAAQ/C,EAAEO,QAAQ,GAAGC,YAAYwC,OAAO,GAAIhD,EAAEO,QAAQ,GAAGC,YAAYwC,OAAO,GAAGC,uBAGhI,S,YCpG1BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0dd2c52a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Input } from 'reactstrap'\r\n// import weatherGenerator from './weatherGenerator'\r\nimport fetch from 'node-fetch'\r\n\r\n\r\n\r\n\r\n\r\nfunction App(){\r\n\r\n\r\n    const api = {\r\n        key: \"d440b3666272b889b80626219442b1d8\",\r\n        base: \"http://api.openweathermap.org/data/2.5/\"\r\n    }\r\n\r\n    const dateBuilder = (d) => {\r\n        let months = [\"January\", \"February\", \"march\", \"April\", \"May\", \"June\", \"July\",\r\n            \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"];\r\n\r\n        let day = days[d.getDay()];\r\n        let date = d.getDate();\r\n        let month = months[d.getMonth()];\r\n        let year = d.getFullYear();\r\n\r\n        return `${day} ${date} ${month} ${year}`\r\n    }\r\n\r\n\r\n    const [query, setQuery] = useState('');\r\n    const [w, setW] = useState({});     \r\n    const [ic, setIcon] = useState({});\r\n    const url = `http://openweathermap.org/img/wn/${ic}.png`;\r\n    const search = e => {\r\n        if (e.key === \"Enter\") {\r\n            fetch(`${api.base}weather?q=${query}&appid=${api.key}`)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    setW(result);\r\n                    setQuery('');\r\n                    setIcon(result.weather[0].icon)                                     \r\n                    console.log(result)\r\n                })\r\n                \r\n        }        \r\n    }                    \r\n    \r\n\r\n     \r\n    return (               \r\n\r\n            \r\n            <div className={\r\n                (typeof w.main != \"undefined\") \r\n                    ? ((w.weather[0].description === \"clear sky\" ) \r\n                    ? 'app sun' \r\n                    : (w.weather[0].description === \"few clouds\")\r\n                    ? 'app fewCl'\r\n                    : (w.weather[0].description === \"scattered clouds\")\r\n                    ? 'app sCl'\r\n                    : (w.weather[0].description === \"broken clouds\" || w.weather[0].description === \"overcast clouds\")\r\n                    ? 'app vCl'\r\n                    :(w.weather[0].description.includes(\"rain\") || w.weather[0].description.includes(\"drizzle\"))\r\n                    ? 'app rain'\r\n                    : (w.weather[0].description.includes(\"snow\"))\r\n                    ?'app snow'                    \r\n                    :'app')\r\n                  : 'app'\r\n                  }>\r\n\r\n                <main>\r\n                    <div className=\"search-box\">\r\n                        <Input\r\n                            type=\"text\"\r\n                            className=\"search-bar\"\r\n                            placeholder=\"Search city\"\r\n                            onChange={e => setQuery(e.target.value)}\r\n                            value={query}\r\n                            onKeyPress={search}\r\n                        />\r\n                    </div>                    \r\n                    {(typeof w.main != \"undefined\") ?  (\r\n                    \r\n                    <div>\r\n                        <div className=\"location-box\">                            \r\n                        <div className=\"location\"> {w.name} <small>{w.sys.country}</small></div>\r\n                        <div className=\"date\">{dateBuilder(new Date())}</div>\r\n                    </div>\r\n                    <div className=\"weather-box\">\r\n                        <div className=\"temp\">\r\n                            {parseFloat(w.main.temp - 270).toFixed(1) + \"°C\"}\r\n                        </div>\r\n                        <div className=\"feel-temp\">\r\n                            <p>\r\n                                Feels like:  {parseFloat(w.main.feels_like - 270).toFixed(1) + \"°C\"}\r\n                            </p>\r\n                       \r\n                        </div>\r\n                        \r\n                    \r\n                        <img className=\"icon\" src= {url} alt=\"\"></img>\r\n                        <div className=\"weather\">{w.weather[0].description.replace(w.weather[0].description.charAt(0), w.weather[0].description.charAt(0).toUpperCase())}</div>\r\n                    </div>\r\n                    </div>\r\n                     ) : ('')}\r\n                </main>\r\n                \r\n            </div>\r\n                  \r\n           \r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}